package com.ssws.gp.resources;

import java.net.URI;
import java.util.List;
import java.util.stream.Collectors;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.ssws.gp.dto.;;;TIPO_ENTIDADE;;;DTO;
import com.ssws.gp.service.;;;TIPO_ENTIDADE;;;Service;

@RestController
@RequestMapping(value="/;;;NOME_ENTIDADE;;;s")
public class ;;;TIPO_ENTIDADE;;;Resource {
	@Autowired
	private ;;;TIPO_ENTIDADE;;;Service service;

	@GetMapping(value = "/{id}")
	public ResponseEntity<;;;TIPO_ENTIDADE;;;> findById(@PathVariable Long id){
		;;;TIPO_ENTIDADE;;; obj = service.findById(id);
		return ResponseEntity.ok().body(obj);
	}



	@GetMapping
	public ResponseEntity<List<;;;TIPO_ENTIDADE;;;DTO>> findAll() {
		List<;;;TIPO_ENTIDADE;;;> list = service.findAll();
		List<;;;TIPO_ENTIDADE;;;DTO> listDTO = list.stream().map(obj -> new ;;;TIPO_ENTIDADE;;;DTO(obj)).collect(Collectors.toList());
		return ResponseEntity.ok().body(listDTO);
	}

	@PostMapping
	public ResponseEntity<;;;TIPO_ENTIDADE;;;DTO> create(@Valid @RequestBody ;;;TIPO_ENTIDADE;;;DTO obj){
		obj = service.create(obj);
		URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(obj.getId()).toUri();
		return ResponseEntity.created(uri).body(obj);
	}

	@PutMapping(value = "/{id}")
	public ResponseEntity<;;;TIPO_ENTIDADE;;;DTO> update(@PathVariable Long id,@Valid @RequestBody ;;;TIPO_ENTIDADE;;;DTO objDto){
		;;;TIPO_ENTIDADE;;; obj = service.update(id,objDto);
		return ResponseEntity.ok().body(new ;;;TIPO_ENTIDADE;;;DTO(obj));
	}

	@DeleteMapping(value = "/{id}")
	public ResponseEntity<Void> delete(@PathVariable Long id){
		service.delete(id);
		return ResponseEntity.noContent().build();
	}

}